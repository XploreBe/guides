{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#knowledge-roadmap","title":"Knowledge roadmap","text":"<p>In the picture below you can find a roadmap of things you can learn/read about to broaden your knowledge and get a better grasp in the Java world</p> <p></p>"},{"location":"git/","title":"Git Guide","text":""},{"location":"git/#what","title":"What?","text":"<p>Git is a version control system.  It allows teams to collaborate on a project. Git is considered to be the industry standard  version control system.</p> <p>Online tutorial</p>"},{"location":"git/#guide","title":"Guide","text":""},{"location":"git/#1-setup","title":"1) Setup","text":"<ul> <li>macos: <code>brew install git</code></li> <li>ubuntu: <code>sudo apt-get install git</code></li> <li>fedora: <code>sudo dnf install git</code></li> <li>windows: download from https://gitforwindows.org/ and run the installer</li> </ul>"},{"location":"git/#2-basic-configuration","title":"2) Basic configuration","text":"<ul> <li> <p>set global name and email (optional)</p> <p>git config --global user.name \"John Doe\"</p> <p>git config --global user.email \"john.doe@example.com\"</p> </li> </ul> <p>All commits will show the name and email configured. This will apply for all repositories on your computer.</p> <ul> <li> <p>set local name and email (recommended)</p> <p>git config user.name \"John Doe\"</p> <p>git config user.email \"john.doe@example.com\"</p> </li> </ul> <p>Same as the global one but it only applies to the current directory. This will make it possible to configure different emails/names for different projects(=clients).</p>"},{"location":"git/#3-basic-commands","title":"3) Basic commands","text":"<p>Your IDE does a lot for you but it pays to know the cli commands.</p> <ul> <li><code>git fetch</code> fetches the latest state of the branches. You then know if you need to pull any changes</li> <li><code>git status</code> shows the files which are staged for commit, shows files which aren't added to git and shows if the current branch is behind/ahead of the remote branch on the server.</li> <li><code>git branch</code> makes a new branch from the current branch</li> <li><code>git checkout</code> checks out a specific branch</li> <li><code>git pull</code> pulls the latest commits on the server into your branch.</li> <li><code>git add {path}</code> stages files to be committed.</li> <li><code>git commit -m \"{message}\"</code> commits the files which are staged for commit.</li> <li><code>git push</code> pushes the local commits to the remote branch.</li> </ul>"},{"location":"git/#4-advanced-commands","title":"4) Advanced commands","text":"<ul> <li><code>git push --force-with-lease</code> this force pushes the current branch with rewritten history to the remote. (dangerous if you don't know what you are doing)</li> <li><code>git rebase</code> (will be explained in a section below)</li> </ul>"},{"location":"git/#5-process-of-developing-a-feature","title":"5) Process of developing a feature","text":"<ul> <li>Checkout a release branch where you want to start from</li> <li>Develop the feature</li> <li>Add the new files to git with <code>git add</code> or via the IDE</li> <li>Commit the changes to the local branch with <code>git commit -m {message}</code> or via the IDE</li> <li>The first line of the commit should be the ticket number with a oneliner describing the ticket. for example <code>XPLR-100 Add OrderEndpoint</code></li> <li>Below the first line you can do what you want to describe what you did, why you did it, ... (look at my favourite git commit)</li> <li>If needed make multiple commits if it makes sense</li> <li><code>git push</code> or via the IDE</li> </ul>"},{"location":"git/#6-tips","title":"6) Tips","text":"<ul> <li>It's possible to encounter a bug during development which isn't related to your ticket. If this is the case you can fix it and commit it to a separate commit. Doing this makes it possible to revert the ticket but still apply the fix for the bug you found.</li> <li>Make a new ticket and place it on the backlog if the time requirement is too large.</li> <li>Make sure each commit builds and runs.</li> <li>Don't have 200 commits for one feature (or only have 1 commit for a very large change)</li> <li>Check with your team if you want to squash all commits into one commit before merging.</li> </ul>"},{"location":"git/#7-advanced","title":"7) Advanced","text":"<p>It's possible to develop a feature and commit several times and in the end to redo the commits. You would do this to make your git history to show a story of the development. This makes it easier for another person to review your ticket as the small steps(=commits) make sense and are smaller bite sized chunks to review. Check this for more details.</p>"},{"location":"git/#8-git-rebase","title":"8) Git Rebase","text":"<p>You have made a new branch to develop a feature and after a couple of days you are finished. But in the meanwhile the main branch has continued as other developers finished/merged their changes. You now have 2 options to get the latest changes into your feature branch. <code>git merge</code> or <code>git rebase</code>. with </p>"},{"location":"git/#git-merge","title":"Git merge","text":"<p>You combine the changes from the main branch and your feature branch. Which most likely will be fixing numerous merge conflicts. In the git log you will see that you made a new Commit to merge them (see picture below). </p>"},{"location":"git/#git-rebase","title":"Git rebase","text":"<p>Imagine you have a main branch with having the last commit named A. When developing your feature you made commits B and C. Now you are finished but in the meanwhile commits D E and F have been applied on the main branch (because other developers merged their branches). With rebasing you take your commits B and C and put them at the end of the main branch.</p> <p>Before the rebase you had commits A B C in that order. When rebasing it would now be A D E F B C. Hopefully the picture below makes it a bit clearer.</p> <p></p> <p>You can do a lot more with <code>git rebase</code> like merging commits, reordering commits. Have a look it interactively rebase in your IDE (Intellij for sure has this) In the end you need to push your change with <code>git push --force-with-lease</code> (read warning below)</p>"},{"location":"git/#warning-on-git-rebase","title":"Warning on git rebase","text":"<p>You ARE rewriting history, you can get into trouble if you are not careful and override someone else's changes. Because of this its recommended to only use <code>git rebase</code> if you are the only one working on that given branch.</p>"},{"location":"resources/","title":"Usefull Resources","text":""},{"location":"resources/#git","title":"Git","text":"<ul> <li> <p>Write better commits, write better projects</p> </li> <li> <p>My favourite git commit</p> </li> <li> <p>Learn Git Branching   Interactive online resource to learn more about git branching while visualizing what effect your commands have.</p> </li> <li> <p>Customizing Git - Git Hooks</p> </li> </ul>"},{"location":"resources/#architecture","title":"Architecture","text":"<ul> <li> <p>Hexagonal architecture</p> </li> <li> <p>Modular Monoliths - Simon Brown</p> </li> <li> <p>The Software Architecture Chronicles</p> </li> </ul>"},{"location":"resources/#aws","title":"AWS","text":"<p>ACloudGuru useful website to start learning</p> <p>Former2 - scans aws account and can generate Infrastructure as code in several formats</p> <p>Good practice exams for AWS certification</p>"},{"location":"resources/#tdd","title":"TDD","text":"<ul> <li>Where did it all go wrong - Ian Cooper   We believe automated tests are essential to deliver high-quality software.   The best way to achieve this is by using Test Driven Developent (TDD).   This talk by Ian Cooper highlights some of the key misunderstandings about TDD.   For example how we should focus on testing behavior instead of individual classes.</li> </ul>"},{"location":"resources/#optional","title":"Optional","text":"<ul> <li>Optional, the mother of all bikesheds - Stuart Marks   Excellent talk from Stuart Marks about when and where to use or not use Optional.</li> </ul>"},{"location":"resources/#katas","title":"Kata's","text":"<ul> <li> <p>Gilded-Rose - Refactoring kata   Ever wanted to have a good challenge to test your refactoring skills? Try this Kata which is available in a wide range of programming languages.</p> </li> <li> <p>Killercoda - Interactive environments   Not just a kata. Killercoda is an interactive environment to practice your command line skills, from linux basics to managing a kubernetes cluster. Provides training scenarios and playgrounds set up to mimick various certificate exam's environments.</p> </li> </ul>"},{"location":"tools/dependency-track/","title":"Dependency Track","text":"<p>Dependency Track is a tool that allows centralised monitoring of vulnerabilities imported through the dependencies of your applications. This tool bases his security analysis solely on a provided SBOM.</p> <p>An SBOM (Software Bill of Materials) is a \"list of ingredi\u00ebnts\" that make up your software. This list is compared to a set of CVE reports to analyse the included vulnerabilities and their severity.</p>"},{"location":"tools/dependency-track/#why-would-you-need-an-sbom","title":"Why would you need an SBOM?","text":"<p>Supply chain attacks are on the rise. It is important that component providers also provide this format to ensure a certain level of security. The American government requires software suppliers to include an SBOM to ensure the safety and integrity of the components they are providing.</p>"},{"location":"tools/dependency-track/#setting-up-dependency-track","title":"Setting up Dependency-Track","text":"<p>The application itself has a straightforward and well-documented setup: - Deployment through WAR (deprecated): https://docs.dependencytrack.org/getting-started/deploy-exewar/ - Deployment through a docker container: https://docs.dependencytrack.org/getting-started/deploy-docker/</p> <p>The application will run 2 separate docker containers by default, frontend and backend separately. It's recommended that you also provide the application with its dedicated database.</p> <p>I've set up a docker-compose script that will help you start out. It contains the frontend, backend and dedicated postgres DB: </p> <pre><code>version: '3.7'\n\n#####################################################\n# This Docker Compose file contains three services\n#    Dependency-Track API Server\n#    Dependency-Track FrontEnd\n#    Postgres Database\n#####################################################\n\nvolumes:\n  dependency-track:\n  postgres:\nservices:\n  dtrack-apiserver:\n    image: dependencytrack/apiserver\n    depends_on:\n      - postgres\n    environment:\n      # The Dependency-Track container can be configured using any of the\n      # available configuration properties defined in:\n      # https://docs.dependencytrack.org/getting-started/configuration/\n      # All properties are upper case with periods replaced by underscores.\n      #\n      # Database Properties\n      - ALPINE_DATABASE_MODE=external\n      - ALPINE_DATABASE_URL=jdbc:postgresql://10.3.61.1:5433/dtrack\n      - ALPINE_DATABASE_DRIVER=org.postgresql.Driver\n      - ALPINE_DATABASE_USERNAME=dtrack\n      - ALPINE_DATABASE_PASSWORD=admin\n      - ALPINE_DATABASE_POOL_ENABLED=true\n      - ALPINE_DATABASE_POOL_MAX_SIZE=20\n      - ALPINE_DATABASE_POOL_MIN_IDLE=10\n      - ALPINE_DATABASE_POOL_IDLE_TIMEOUT=300000\n      - ALPINE_DATABASE_POOL_MAX_LIFETIME=600000\n    deploy:\n      resources:\n        limits:\n          memory: 12288m\n        reservations:\n          memory: 8192m\n      restart_policy:\n        condition: on-failure\n    ports:\n      - '8081:8080'\n    volumes:\n      - 'dependency-track:/data'\n    restart: unless-stopped\n  dtrack-frontend:\n    image: dependencytrack/frontend\n    depends_on:\n      - dtrack-apiserver\n    environment:\n    # The base URL of the API server.\n    # NOTE:\n    #   * This URL must be reachable by the browsers of your users.\n    #   * The frontend container itself does NOT communicate with the API server directly, it just serves static files.\n    #   * When deploying to dedicated servers, please use the external IP or domain of the API server.\n    - API_BASE_URL=http://localhost:8081\n    # - \"OIDC_ISSUER=\"\n    # - \"OIDC_CLIENT_ID=\"\n    # - \"OIDC_SCOPE=\"\n    # - \"OIDC_FLOW=\"\n    # - \"OIDC_LOGIN_BUTTON_TEXT=\"\n    # volumes:\n    # - \"/host/path/to/config.json:/app/static/config.json\"\n    ports:\n      - \"8080:8080\"\n    restart: unless-stopped\n  postgres:\n    image: postgres:latest\n    environment:\n      - POSTGRES_PASSWORD=admin\n      - POSTGRES_USER=dtrack\n    ports:\n      - '5432:5432'\n    volumes:\n      - 'postgres:/data'\n    restart: unless-stopped\n</code></pre>"},{"location":"tools/dependency-track/#usage","title":"Usage","text":"<p>Dependency-Track contains several useful features that can be helpful in tracking vulnerabilities within your infrastructure.</p>"},{"location":"tools/dependency-track/#dashboard","title":"Dashboard","text":"<p>Grafana-like dashboard showing the general status of your applications. It indicates the total of vulnerable components, audited vulnerabilities, release overview of vulnerabilities, ...</p>"},{"location":"tools/dependency-track/#projects","title":"Projects","text":"<p>List overview of your existing applications and their analysed version. It gives a representation of the severity for each application. Each application is assigned a risk score along with the total amount of vulnernabilities. </p> <p>The risk score is a calculation based on severity and likeliness of all the detected vulnerabilities.</p>"},{"location":"tools/dependency-track/#components","title":"Components","text":"<p>Useful list view that allows specific searches on vulnerabilities and components. Most common usage would be to check if you're vulnerable to a specific CVE.</p>"},{"location":"tools/dependency-track/#vulnerabilities","title":"Vulnerabilities","text":"<p>Shows which vulnerabilities are present within your infrastructure. This interface also allows maintenance of these vulnerabilities, for example suppressing certain vulnernabilities</p>"},{"location":"tools/dependency-track/#generating-sboms","title":"Generating SBOMs","text":"<p>The generation of an SBOM can be implemented withing your build framework: - Gradle: https://github.com/CycloneDX/cyclonedx-gradle-plugin - Maven: https://github.com/CycloneDX/cyclonedx-maven-plugin</p> <p>These plugins will generate an SBOM while which you can (automatically) upload into Dependency-Track. Jenkins has a dedicated plugin to automate the upload of the generated file: https://plugins.jenkins.io/dependency-track/</p>"},{"location":"tools/dependency-track/#sources","title":"Sources:","text":"<ul> <li>https://docs.dependencytrack.org/</li> <li>https://www.cisa.gov/sbom</li> </ul>"},{"location":"tools/sdk-management/","title":"SDK management tools","text":"<ul> <li>sdkman: SDKMan allows you to manage several SDKS. Jdk, Maven, Gradle, ....</li> <li>jenv: jenv allows you to easily and quickly specify which jvm to use on your whole computer or per directory</li> </ul>"},{"location":"tools/time-saving-tools/","title":"Time saving tools","text":""},{"location":"tools/time-saving-tools/#time-saving-tools","title":"Time saving tools","text":"<ul> <li>jq   Handy tool to transform and analyse JSON. Processes input streamingly, so it can handle huge json structures without slowing down too much.</li> </ul>"}]}